# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet ttag "jsx tag"
<${1}${2}></${0:$1}>
endsnippet

snippet afun "arrow function" i
() => { ${1} }
endsnippet

snippet ffun "define arrow function" mb
const ${1:functionName} = (${2:args}) => {
};
endsnippet

snippet cl "console.log"
console.log(${0});
endsnippet

snippet deffun "insert function"
const ${1:functionName} = (${2:args}) => {
};
endsnippet

snippet it "jest test"
it("${1}", () => {
  ${2}
});
endsnippet

snippet desc "jest describe"
describe("${1}", () => {
  ${2}
});
endsnippet

snippet imd "import redux usedispatch"
import { useDispatch } from "react-redux";
endsnippet

snippet imrs "import react usestate"
import React, { useState } from "react";
endsnippet

snippet imim "import immutable"
import { ${1:fromJS, List, Map} } from "immutable";
endsnippet

snippet imlo "import lodash"
import { $1 } from "lodash";
endsnippet

snippet imst "import styled"
import styled from "styled-components";
endsnippet

snippet uses "useState hook"
const [${1:val}, ${2:setVal}] = useState($3);
endsnippet

snippet used "useDispatch hook"
const dispatch = useDispatch();
endsnippet

snippet useEffect "useEffect hook"
useEffect(() => {
  $1
});
endsnippet

snippet edred "export default reducer function"
export default function(state, action) {
  return state;
};
endsnippet

snippet fsmd "fsm dispatch"
function(fsm, dispatch, getState) {
  $1
},
endsnippet
