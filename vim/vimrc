" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Activate Pathogen plugin
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

" SETTINGS
"
filetype plugin indent on
set shell=/bin/bash
set encoding=utf-8
set smarttab
set softtabstop=2
set shiftwidth=2
set expandtab
set tabstop=4
set ignorecase
set smartcase
set nowrap
set textwidth=0
set autoindent
set linebreak
set number
set cursorline
set grepformat=%f:%l:%m
set grepprg=ack\ -A\ 0\ -B\ 0\ --nocolour\ --nogroup\ --column
set listchars=tab:▶\ ,eol:¬
set wildignore=*.swp,.git,.svn,*.log,*.gif,*.jpeg,*.jpg,*.png,*.pdf,tmp/**

set hidden                      " Be more liberal about hidden buffers
set backspace=indent,eol,start  " backspace over everything
set numberwidth=5               " Sets the gutter width for line numbers
set nobackup                    " do not keep a backup file, use an SCM instead
set history=50                  " keep 50 lines of command line history
set ruler                       " show the cursor position all the time
set incsearch                   " do incremental searching
set hlsearch                    " Highlight all search matches
set lazyredraw                  " Don't update the display while executing macros
set ch=2                        " Make command line two lines high
set laststatus=2                " Always show the status line
set showcmd                     " Show the current command in the lower right corner
set showmode                    " Show the current mode
set timeoutlen=250              " Short map keys timeout keeps the ui feeling snappy
set tags=./.tags,.tags
set modelines=1
" Insert only one space when joining lines that contain sentence-terminating
" punctuation like `.`.
set nojoinspaces

" Keep more context when scrolling off the end of a buffer
set scrolloff=3

" Store temporary files in a central spot
set directory=~/.vim-tmp/,~/.tmp/,~/tmp/,/var/tmp/,/tmp

set statusline=
set statusline+=[%n]\ %<                        " Buffer number
set statusline+=%.99f\                          " File path
set statusline+=%w%m%r                          " Flags: window type, is modified, read-only
set statusline+=%y                              " File type
set statusline+=%=                              " Right align everything past here
set statusline+=%-16(\ %l,%c\|%{col('$')-1}\ %) " show line number, cols, total cols
set statusline+=%P                              " Percentage through file

" PLUGIN SETTINGS
"
" Hide the following file name patterns from the builtin browser
let g:netrw_list_hide = '.*\.swp$,\.DS_Store$'
let g:snips_author = "Andrew Le" " Set snipmate author
imap <C-J> <Plug>snipMateNextOrTrigger
let g:makegreen_stay_on_file = 1

" Command-T Plugin and File Navigation
let g:CommandTWildIgnore=&wildignore . ",**/tmp/*,public/**/*,**/db/migrate/*,**/node_modules/*"
cnoremap %% <C-R>=expand('%:h').'/'<cr>
nmap <leader>f  :CommandTFlush<cr>
nmap <leader>g  :CommandTFlush<cr>\|:CommandT<cr>
let g:CommandTMaxHeight = 15
let g:CommandTFileScanner = 'watchman'

" Fast alternate file switching
nnoremap <leader><leader> <C-^>

" Fast redraw
nmap <C-l> :redraw!<CR>

" Syntastic
function ALESyntasticCheck()
  silent! w
  silent! SyntasticCheck
  redraw!
endfunction
nmap <leader>c :call ALESyntasticCheck()<CR>
nmap <leader>ce :SyntasticErrors<CR>
let g:syntastic_enable_signs=1
let g:syntastic_ignore_files = ['\c.*\.fish$', '\c.*\.html.erb$']
let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'passive_filetypes': ['sass', 'scss', 'haml'] }

" Completions
set complete=.,b,u,]
set completeopt=menu,preview,longest
set wildmode=longest,list:longest " zsh like text replacement

" SuperTab
let g:SuperTabCrMapping = 1
let g:SuperTabLongestHighlight = 1

let g:rails_projections = {
      \ "Gemfile": {
      \   "command": "gemfile",
      \   "alternate": "Gemfile.lock" }}

" File types
autocmd BufReadPost * call GoToLastEditedLine()
autocmd BufNewFile,BufRead *.master,*.aspx,*.ascx :set ft=html
autocmd BufNewFile,BufRead *.ru :set ft=ruby
autocmd BufNewFile,BufRead Vagrantfile :set ft=ruby
autocmd BufNewFile,BufRead *.pjs :set ft=processing
autocmd BufNewFile,BufRead *.radius :set ft=html
autocmd BufNewFile,BufRead *.cron :set ft=crontab
autocmd BufNewFile,BufRead *.json :set ft=javascript
autocmd BufReadPost COMMIT_EDITMSG exec "normal! gg"
autocmd FileType text setlocal textwidth=78
autocmd FileType netrw setlocal nolist
autocmd FileType ruby set sw=2 sts=2 et
autocmd FileType javascript set sw=2 sts=2 et

" GUI/TERMINAL ENVIRONMENT SETTINGS
syntax on
if has("gui_running")
  set guioptions=egmrt
  set guifont=Inconsolata:h18
else
  set t_Co=256
  set background=dark
  colorscheme ale_solarized_dark
endif

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" NORMAL MODE KEY MAPPINGS
"
" Move up and down over screen lines instead of file lines
nnoremap j gj
nnoremap k gk
nnoremap <c-j> 5gj
nnoremap <c-k> 5gk
nnoremap <leader>w <c-w>vzz<c-w>l

" Edit the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Quicker tab navigation
noremap <leader>; :tabnext<CR>
noremap <leader>, :tabprev<CR>

command! KillWhitespace :%s/\s\+$//g
noremap <Del> :KillWhitespace<cr>

function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'))
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>n :call RenameFile()<cr>

function! CreateDirectoryTreeToFile()
  exec ':!echo CREATE ' . expand("%:p:h") . '; mkdir -p ' . expand("%:p:h")
endfunction
map <leader>d :call CreateDirectoryTreeToFile()<cr>

" INSERT MODE KEY MAPPINGS
"
" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Insert a hash rocket with <c-l>
imap <c-l> <space>=><space>

" VISUAL MODE KEY MAPPINGS
"
vnoremap <c-j> 5gj
vnoremap <c-k> 5gk

" COMMAND MODE KEY MAPPINGS
"
" Map :W to :w so vim stops complaining about W
command! W :w
command! E :Explore

" SPELLING CORRECTIONS
"
iabbrev conosle console
iabbrev destory destroy
iabbrev destory_all destroy_all
iabbrev timline timeline

iabbrev AR: ActiveRecord

" allow command line editing like emacs
cnoremap <C-A>      <Home>
cnoremap <C-E>      <End>
cnoremap <C-N>      <Down>
cnoremap <C-P>      <Up>
cnoremap <ESC>b     <S-Left>
cnoremap <ESC>f     <S-Right>
set cedit=<C-F>

function! GoToLastEditedLine()
  if line("'\"") > 1 && line("'\"") <= line("$") |
    exec "normal! g`\"" |
  endif
endfunction
